# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Checkout tools repo
        uses: actions/checkout@v2
        with:
          # Repository name with owner. For example, actions/checkout
          # Default: ${{ github.repository }}
          repository: henry2004y/Batsrus.jl
          path: my-tools
      
      # Cannot directly clone a public repo!
      - name: Clone GitHub repository
        run: git clone git@github.com:henry2004y/Batsrus.jl
        continue-on-error: true
      
      - name: Clone GitLab repository
        run: git clone git@gitlab.com:gitlab-examples/ruby-function
        continue-on-error: true

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.

      - name: Julia
        run: |
           julia -v
           julia -e 'println("Hello from Julia!")'
           julia -e 'using Pkg; Pkg.add("Vlasiator")'
        continue-on-error: true
        
      - name: GCC
        run: |
           which gcc
           gcc --version
           sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 100 --slave /usr/bin/g++ g++ /usr/bin/g++-10 --slave /usr/bin/gcov gcov /usr/bin/gcov-10
           gcc --version
        
      - name: Cache multiple paths
        uses: actions/cache@v2
        id: cache-files
        with:
          path: |
            ~/mpi
            ~/boost
          key: ${{ runner.os }}-files

      - name: Check caches
        if: steps.cache-files.outputs.cache-hit == 'true'
        run: | 
          sudo cp --force --recursive ~/mpi/* /
          mpicc --version
          sudo cp --force --recursive ~/boost/* /
          dpkg -s libboost-dev | grep 'Version'
          
      - name: Install mpi & boost
        if: steps.cache-files.outputs.cache-hit != 'true'
        run: |
          sudo apt-get install openmpi-bin libopenmpi-dev
          mkdir -p ~/mpi
          for dep in libopenmpi-dev; do
            dpkg -L $dep | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/mpi/
          done
          fi
          mpicc --version
          sudo apt-get install libboost-all-dev
          for dep in libboost-all-dev; do
            dpkg -L $dep | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/boost/
          done
          fi
          dpkg -s libboost-dev | grep 'Version'
